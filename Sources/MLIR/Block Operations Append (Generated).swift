/// This file was autogenerated by running `Tools/generate-boilerplate`

extension Block.Operations {

  /// Appends an operation with 0 results
  public func append(_ definition: Operation.Definition<()>, from location: Location) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 0)
    return ()
  }

  /// Appends an operation with 1 results
  public func append(_ definition: Operation.Definition<(Value)>, from location: Location) -> (
    Value
  ) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 1)
    return (results[0])
  }

  /// Appends an operation with 2 results
  public func append(_ definition: Operation.Definition<(Value, Value)>, from location: Location)
    -> (Value, Value)
  {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 2)
    return (results[0], results[1])
  }

  /// Appends an operation with 3 results
  public func append(
    _ definition: Operation.Definition<(Value, Value, Value)>, from location: Location
  ) -> (Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 3)
    return (results[0], results[1], results[2])
  }

  /// Appends an operation with 4 results
  public func append(
    _ definition: Operation.Definition<(Value, Value, Value, Value)>, from location: Location
  ) -> (Value, Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 4)
    return (results[0], results[1], results[2], results[3])
  }

  /// Appends an operation with 5 results
  public func append(
    _ definition: Operation.Definition<(Value, Value, Value, Value, Value)>, from location: Location
  ) -> (Value, Value, Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 5)
    return (results[0], results[1], results[2], results[3], results[4])
  }

  /// Appends an operation with 6 results
  public func append(
    _ definition: Operation.Definition<(Value, Value, Value, Value, Value, Value)>,
    from location: Location
  ) -> (Value, Value, Value, Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 6)
    return (results[0], results[1], results[2], results[3], results[4], results[5])
  }

  /// Appends an operation with 7 results
  public func append(
    _ definition: Operation.Definition<(Value, Value, Value, Value, Value, Value, Value)>,
    from location: Location
  ) -> (Value, Value, Value, Value, Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 7)
    return (results[0], results[1], results[2], results[3], results[4], results[5], results[6])
  }

  /// Appends an operation with 8 results
  public func append(
    _ definition: Operation.Definition<(Value, Value, Value, Value, Value, Value, Value, Value)>,
    from location: Location
  ) -> (Value, Value, Value, Value, Value, Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 8)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6], results[7]
    )
  }

  /// Appends an operation with 9 results
  public func append(
    _ definition: Operation.Definition<
      (Value, Value, Value, Value, Value, Value, Value, Value, Value)
    >, from location: Location
  ) -> (Value, Value, Value, Value, Value, Value, Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 9)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6],
      results[7], results[8]
    )
  }

  /// Appends an operation with 10 results
  public func append(
    _ definition: Operation.Definition<
      (Value, Value, Value, Value, Value, Value, Value, Value, Value, Value)
    >, from location: Location
  ) -> (Value, Value, Value, Value, Value, Value, Value, Value, Value, Value) {
    let operation = Operation(definition, location: location)!
    append(operation)
    let results = operation.results
    precondition(results.count == 10)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6],
      results[7], results[8], results[9]
    )
  }

}
