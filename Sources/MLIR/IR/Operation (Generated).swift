/// This file was autogenerated by running `Tools/generate-boilerplate`

extension OperationBuilder.GenericBuilder {

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (MLIR.Value) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (results[0])
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (MLIR.Value, MLIR.Value) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (results[0], results[1])
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (results[0], results[1], results[2])
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (results[0], results[1], results[2], results[3])
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (results[0], results[1], results[2], results[3], results[4])
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (results[0], results[1], results[2], results[3], results[4], results[5])
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (results[0], results[1], results[2], results[3], results[4], results[5], results[6])
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (
    MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
  ) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6], results[7]
    )
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (
    MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
    MLIR.Value
  ) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6],
      results[7], results[8]
    )
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    _ t9: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (
    MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
    MLIR.Value, MLIR.Value
  ) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6],
      results[7], results[8], results[9]
    )
  }

  public mutating func build(
    _ dialect: Dialect,
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    _ t9: MLIR.`Type`, _ t10: MLIR.`Type`,
    @RegionBuilder regions: () -> [RegionBuilder.Region] = { [] },
    file: StaticString = #fileID, line: Int = #line, column: Int = #column
  ) -> (
    MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
    MLIR.Value, MLIR.Value, MLIR.Value
  ) {
    let results = build(
      dialect, name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0],
      regions: regions,
      file: file, line: line, column: column)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6],
      results[7], results[8], results[9], results[10]
    )
  }

}
