
/**
 This file was autogenerated by
 ```
 $ pushd Utilities/BoilerplateGenerator
 $ swift run GenerateOperationProtocolExtensions
 $ popd
 ```
 */

public extension OperationProtocol where ResultTypes == () {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let () = resultTypes
    return []
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> () {
    ()
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0) = resultTypes
    return [t0]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value) {
    (operationResults[0])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1) = resultTypes
    return [t0, t1]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2) = resultTypes
    return [t0, t1, t2]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2, t3) = resultTypes
    return [t0, t1, t2, t3]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2], operationResults[3])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2, t3, t4) = resultTypes
    return [t0, t1, t2, t3, t4]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2], operationResults[3], operationResults[4])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2, t3, t4, t5) = resultTypes
    return [t0, t1, t2, t3, t4, t5]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2], operationResults[3], operationResults[4], operationResults[5])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2, t3, t4, t5, t6) = resultTypes
    return [t0, t1, t2, t3, t4, t5, t6]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2], operationResults[3], operationResults[4], operationResults[5], operationResults[6])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2, t3, t4, t5, t6, t7) = resultTypes
    return [t0, t1, t2, t3, t4, t5, t6, t7]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2], operationResults[3], operationResults[4], operationResults[5], operationResults[6], operationResults[7])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2, t3, t4, t5, t6, t7, t8) = resultTypes
    return [t0, t1, t2, t3, t4, t5, t6, t7, t8]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2], operationResults[3], operationResults[4], operationResults[5], operationResults[6], operationResults[7], operationResults[8])
  }
}

public extension OperationProtocol where ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`) {
  static func types(of resultTypes: ResultTypes) -> [MLIR.`Type`] {
    let (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) = resultTypes
    return [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9]
  }
  static func results(from operationResults: MLIR.Operation<OwnedBySwift>.Results) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    (operationResults[0], operationResults[1], operationResults[2], operationResults[3], operationResults[4], operationResults[5], operationResults[6], operationResults[7], operationResults[8], operationResults[9])
  }
}
