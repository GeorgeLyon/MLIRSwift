/// This file was autogenerated by running `Tools/generate-boilerplate`

extension Block {
  public init(
    _ t0: Type,
    operations: (inout OperationBuilder, MLIR.Value) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0],
      operations: { builder, arguments in
        try operations(&builder, arguments[0])
      })
  }

  public init(
    _ t0: Type, _ t1: Type,
    operations: (inout OperationBuilder, MLIR.Value, MLIR.Value) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1],
      operations: { builder, arguments in
        try operations(&builder, arguments[0], arguments[1])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type,
    operations: (inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2],
      operations: { builder, arguments in
        try operations(&builder, arguments[0], arguments[1], arguments[2])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type,
    operations: (inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) throws ->
      Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3],
      operations: { builder, arguments in
        try operations(&builder, arguments[0], arguments[1], arguments[2], arguments[3])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type,
    operations: (inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value)
      throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3, t4],
      operations: { builder, arguments in
        try operations(
          &builder, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type,
    operations: (
      inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3, t4, t5],
      operations: { builder, arguments in
        try operations(
          &builder, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
          arguments[5])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type,
    operations: (
      inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3, t4, t5, t6],
      operations: { builder, arguments in
        try operations(
          &builder, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
          arguments[5], arguments[6])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    operations: (
      inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7],
      operations: { builder, arguments in
        try operations(
          &builder, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
          arguments[5], arguments[6], arguments[7])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    _ t8: Type,
    operations: (
      inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8],
      operations: { builder, arguments in
        try operations(
          &builder, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
          arguments[5], arguments[6], arguments[7], arguments[8])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    _ t8: Type, _ t9: Type,
    operations: (
      inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9],
      operations: { builder, arguments in
        try operations(
          &builder, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
          arguments[5], arguments[6], arguments[7], arguments[8], arguments[9])
      })
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    _ t8: Type, _ t9: Type, _ t10: Type,
    operations: (
      inout OperationBuilder, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows
  where
    Ownership == OwnedBySwift
  {
    try self.init(
      argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10],
      operations: { builder, arguments in
        try operations(
          &builder, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
          arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10])
      })
  }

}
