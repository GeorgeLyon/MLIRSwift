/// This file was autogenerated by running `Tools/generate-boilerplate`

extension Block.Operations {

  /**
 Appends an operation with 1 results and returns the results
 */
  public func append(_ operation: Operation<(Value)>) -> (Value) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 2 results and returns the results
 */
  public func append(_ operation: Operation<(Value, Value)>) -> (Value, Value) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 3 results and returns the results
 */
  public func append(_ operation: Operation<(Value, Value, Value)>) -> (Value, Value, Value) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 4 results and returns the results
 */
  public func append(_ operation: Operation<(Value, Value, Value, Value)>) -> (
    Value, Value, Value, Value
  ) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 5 results and returns the results
 */
  public func append(_ operation: Operation<(Value, Value, Value, Value, Value)>) -> (
    Value, Value, Value, Value, Value
  ) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 6 results and returns the results
 */
  public func append(_ operation: Operation<(Value, Value, Value, Value, Value, Value)>) -> (
    Value, Value, Value, Value, Value, Value
  ) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 7 results and returns the results
 */
  public func append(_ operation: Operation<(Value, Value, Value, Value, Value, Value, Value)>) -> (
    Value, Value, Value, Value, Value, Value, Value
  ) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 8 results and returns the results
 */
  public func append(
    _ operation: Operation<(Value, Value, Value, Value, Value, Value, Value, Value)>
  ) -> (Value, Value, Value, Value, Value, Value, Value, Value) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 9 results and returns the results
 */
  public func append(
    _ operation: Operation<(Value, Value, Value, Value, Value, Value, Value, Value, Value)>
  ) -> (Value, Value, Value, Value, Value, Value, Value, Value, Value) {
    append(operation.typeErased)
    return operation.results
  }

  /**
 Appends an operation with 10 results and returns the results
 */
  public func append(
    _ operation: Operation<(Value, Value, Value, Value, Value, Value, Value, Value, Value, Value)>
  ) -> (Value, Value, Value, Value, Value, Value, Value, Value, Value, Value) {
    append(operation.typeErased)
    return operation.results
  }

}
