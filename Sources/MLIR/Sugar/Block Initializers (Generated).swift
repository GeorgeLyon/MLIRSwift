/// This file was autogenerated by running `Tools/generate-boilerplate`

extension Block where Ownership == OwnedBySwift {
  public init(
    _ t0: Type,
    buildOperations: (Block.Operations, MLIR.Value) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0])
    try buildOperations(operations, arguments[0])
  }

  public init(
    _ t0: Type, _ t1: Type,
    buildOperations: (Block.Operations, MLIR.Value, MLIR.Value) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1])
    try buildOperations(operations, arguments[0], arguments[1])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type,
    buildOperations: (Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2])
    try buildOperations(operations, arguments[0], arguments[1], arguments[2])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type,
    buildOperations: (Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) throws ->
      Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3])
    try buildOperations(operations, arguments[0], arguments[1], arguments[2], arguments[3])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type,
    buildOperations: (Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value)
      throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3, t4])
    try buildOperations(
      operations, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type,
    buildOperations: (
      Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3, t4, t5])
    try buildOperations(
      operations, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]
    )
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type,
    buildOperations: (
      Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value
    ) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3, t4, t5, t6])
    try buildOperations(
      operations, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
      arguments[5], arguments[6])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    buildOperations: (
      Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7])
    try buildOperations(
      operations, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
      arguments[5], arguments[6], arguments[7])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    _ t8: Type,
    buildOperations: (
      Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8])
    try buildOperations(
      operations, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
      arguments[5], arguments[6], arguments[7], arguments[8])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    _ t8: Type, _ t9: Type,
    buildOperations: (
      Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9])
    try buildOperations(
      operations, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
      arguments[5], arguments[6], arguments[7], arguments[8], arguments[9])
  }

  public init(
    _ t0: Type, _ t1: Type, _ t2: Type, _ t3: Type, _ t4: Type, _ t5: Type, _ t6: Type, _ t7: Type,
    _ t8: Type, _ t9: Type, _ t10: Type,
    buildOperations: (
      Block.Operations, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
      MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
    ) throws -> Void
  ) rethrows {
    self.init(argumentTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10])
    try buildOperations(
      operations, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4],
      arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10])
  }

}
