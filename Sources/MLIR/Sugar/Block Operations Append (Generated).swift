/// This file was autogenerated by running `Tools/generate-boilerplate`

extension Block.Operations {

  public func append(_ op: BuildableOperation<()>, at location: Location) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 0)
    return ()
  }

  public func append(_ op: BuildableOperation<(MLIR.`Type`)>, at location: Location) -> (MLIR.Value)
  {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 1)
    return (results[0])
  }

  public func append(_ op: BuildableOperation<(MLIR.`Type`, MLIR.`Type`)>, at location: Location)
    -> (MLIR.Value, MLIR.Value)
  {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 2)
    return (results[0], results[1])
  }

  public func append(
    _ op: BuildableOperation<(MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)>, at location: Location
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 3)
    return (results[0], results[1], results[2])
  }

  public func append(
    _ op: BuildableOperation<(MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)>,
    at location: Location
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 4)
    return (results[0], results[1], results[2], results[3])
  }

  public func append(
    _ op: BuildableOperation<(MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)>,
    at location: Location
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 5)
    return (results[0], results[1], results[2], results[3], results[4])
  }

  public func append(
    _ op: BuildableOperation<
      (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)
    >, at location: Location
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 6)
    return (results[0], results[1], results[2], results[3], results[4], results[5])
  }

  public func append(
    _ op: BuildableOperation<
      (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)
    >, at location: Location
  ) -> (MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 7)
    return (results[0], results[1], results[2], results[3], results[4], results[5], results[6])
  }

  public func append(
    _ op: BuildableOperation<
      (
        MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`,
        MLIR.`Type`
      )
    >, at location: Location
  ) -> (
    MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value
  ) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 8)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6], results[7]
    )
  }

  public func append(
    _ op: BuildableOperation<
      (
        MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`,
        MLIR.`Type`, MLIR.`Type`
      )
    >, at location: Location
  ) -> (
    MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
    MLIR.Value
  ) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 9)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6],
      results[7], results[8]
    )
  }

  public func append(
    _ op: BuildableOperation<
      (
        MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`,
        MLIR.`Type`, MLIR.`Type`, MLIR.`Type`
      )
    >, at location: Location
  ) -> (
    MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value, MLIR.Value,
    MLIR.Value, MLIR.Value
  ) {
    let operation = append(op.makeOperation(at: location))
    let results = operation.results
    assert(results.count == 10)
    return (
      results[0], results[1], results[2], results[3], results[4], results[5], results[6],
      results[7], results[8], results[9]
    )
  }

}
