/// This file was autogenerated by running `Tools/generate-boilerplate`

extension BuildableOperation
where
  ResultTypes == ()
{
  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = []
    self.regions = regions
  }
  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = []
    self.regions = regions
  }
}

extension BuildableOperation
where
  ResultTypes == MLIR.`Type`
{
  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultType: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [resultType]
    self.regions = regions
  }
  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultType: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [resultType]
    self.regions = regions
  }
}

extension BuildableOperation
where
  ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`)
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (
    MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`
  )
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (
    MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`,
    MLIR.`Type`
  )
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (
    MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`,
    MLIR.`Type`, MLIR.`Type`
  )
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7, t8]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7, t8]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (
    MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`,
    MLIR.`Type`, MLIR.`Type`, MLIR.`Type`
  )
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    _ t9: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    _ t9: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9]
    self.regions = regions
  }

}

extension BuildableOperation
where
  ResultTypes == (
    MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`,
    MLIR.`Type`, MLIR.`Type`, MLIR.`Type`, MLIR.`Type`
  )
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    _ t9: MLIR.`Type`, _ t10: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = dialect
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
    self.regions = regions
  }

  init(
    _ name: String,
    attributes: MLIR.NamedAttributes = [:],
    operands: [MLIR.Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    _ t9: MLIR.`Type`, _ t10: MLIR.`Type`,
    regions: [MLIR.Region<OwnedBySwift>] = []
  ) {
    self.dialect = nil
    self.name = name
    self.attributes = attributes
    self.operands = operands
    self.resultTypes = [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10]
    self.regions = regions
  }

}
