/// This file was autogenerated by running `Tools/generate-boilerplate`

// 2 results
extension OperationProtocol where Self == TypedOperation<(Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 3 results
extension OperationProtocol where Self == TypedOperation<(Value, Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 4 results
extension OperationProtocol where Self == TypedOperation<(Value, Value, Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2, t3],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 5 results
extension OperationProtocol where Self == TypedOperation<(Value, Value, Value, Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2, t3, t4],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 6 results
extension OperationProtocol
where Self == TypedOperation<(Value, Value, Value, Value, Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2, t3, t4, t5],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 7 results
extension OperationProtocol
where Self == TypedOperation<(Value, Value, Value, Value, Value, Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2, t3, t4, t5, t6],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 8 results
extension OperationProtocol
where Self == TypedOperation<(Value, Value, Value, Value, Value, Value, Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2, t3, t4, t5, t6, t7],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 9 results
extension OperationProtocol
where Self == TypedOperation<(Value, Value, Value, Value, Value, Value, Value, Value, Value)> {

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}

// 10 results
extension OperationProtocol
where Self == TypedOperation<(Value, Value, Value, Value, Value, Value, Value, Value, Value, Value)>
{

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes t0: MLIR.`Type`, _ t1: MLIR.`Type`, _ t2: MLIR.`Type`, _ t3: MLIR.`Type`,
    _ t4: MLIR.`Type`, _ t5: MLIR.`Type`, _ t6: MLIR.`Type`, _ t7: MLIR.`Type`, _ t8: MLIR.`Type`,
    _ t9: MLIR.`Type`,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: [t0, t1, t2, t3, t4, t5, t6, t7, t8, t9],
      ownedRegions: ownedRegions,
      location: location)
  }

  public init(
    _ dialect: Dialect, _ name: String,
    attributes: [NamedAttribute] = [],
    operands: [Value] = [],
    resultTypes _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType, _: Self.InferredResultType, _: Self.InferredResultType,
    _: Self.InferredResultType,
    ownedRegions: [Region] = [],
    location: Location
  ) {
    self.init(
      dialect: dialect,
      name: name,
      attributes: attributes,
      operands: operands,
      resultTypes: nil,
      ownedRegions: ownedRegions,
      location: location)
  }

}
