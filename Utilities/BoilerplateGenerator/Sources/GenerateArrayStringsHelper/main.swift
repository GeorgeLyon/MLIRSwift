
import Foundation

let maxStringsForFastPath = 10

struct Output {
  var indentation = 0
  var lines: [String] = []
  var string: String { lines.joined(separator: "\n") }
}
func <<(output: inout Output, next: String) {
  output.lines.append(contentsOf: next
    .components(separatedBy: "\n")
    .map { String(repeating: "  ", count: output.indentation) + $0 })
}
var output = Output()

output << """
/**
 This file is autogenerated by
 ```
 $ pushd Utilities/BoilerplateGenerator
 $ swift run GenerateArrayStringsHelper > "../../Sources/CoreMLIR/Helpers/Array<String>.swift"
 $ popd
 ```
 */

import CCoreMLIR

extension Array where Element == String {
  /**
   In Swift, there is no easy way use closure-scoped APIs like `withUTF8` on an array of values. This method bridges the gap for `MlirStringRef`, providing a fast path for up to \(maxStringsForFastPath) strings and a fallback path for larger arrays.
   */
  func withUnsafeMlirStringRefs<T>(_ body: ([MlirStringRef]) throws -> T) rethrows -> T {
    switch count {
"""

output.indentation += 1
for count in 0...maxStringsForFastPath {
  let range = 0..<count
  var body = Output()
  for i in range {
    body << """
      try self[\(i)].withUnsafeMlirStringRef { s\(i) in
      """
    body.indentation += 1
  }
  body << "try body([\(range.map { "s\($0)" }.joined(separator: ", "))])"
  for _ in range {
    body.indentation -= 1
    body << """
      }
      """
  }
  output << """
    case \(count):
  """
  output.indentation += 2
  output << "return \(body.string)"
  output.indentation -= 2
}
output.indentation -= 1
output << """
    default:
      /// Slow path
      var buffers: [UnsafeMutableBufferPointer<Int8>] = []
      for string in self {
        var mutableString = string
        mutableString.withUTF8 { originalBuffer in
          let buffer = UnsafeMutableBufferPointer<Int8>
            .allocate(capacity: originalBuffer.count)
          originalBuffer.copyBytes(to: buffer)
          buffers.append(buffer)
        }
      }
      defer {
        buffers.forEach { $0.deallocate() }
      }
      return try body(buffers.map { mlirStringRefCreate($0.baseAddress, $0.count) })
    }
  }
}
"""

print(output.string)
