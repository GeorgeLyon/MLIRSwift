#!/bin/bash

set -e

if [[ "$VERBOSE" == "true" ]]; then
  set -x
fi

function check_executable {
  if ! which "$1" > /dev/null; then
    echo "$1 not installed."
    exit 1
  fi
}

check_executable git
check_executable cmake
check_executable ninja

# Configuration
TOOLS_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_ROOT=${PROJECT_ROOT:-$(cd "$TOOLS_ROOT" && cd "$(git rev-parse --show-toplevel)" && pwd)}
DEPENDENCIES_ROOT=${DEPENDENCIES_ROOT:-$PROJECT_ROOT/.dependencies}
INSTALL_PATH=${INSTALL_PATH:-$DEPENDENCIES_ROOT/installed}
LLVM_COMMIT=${LLVM_COMMIT:-$(cat "$TOOLS_ROOT/llvm-commit")}
LLVM_REPO=${LLVM_REPO:-https://github.com/llvm/llvm-project}
LLVM_REPO_PATH=${LLVM_REPO_PATH:-$DEPENDENCIES_ROOT/llvm-repo}
LLVM_PATH_IN_REPO=${LLVM_PATH_IN_REPO:-""}
LLVM_ROOT="$LLVM_REPO_PATH/$LLVM_PATH_IN_REPO"
LLVM_BUILD_ROOT="$DEPENDENCIES_ROOT/llvm-build"
IFS=" " read -r -a LLVM_ADDITIONAL_CMAKE_ARGS_ARRAY <<< "$LLVM_ADDITIONAL_CMAKE_ARGS"
LLVM_SYSTEM_LIBRARY_TARGETS="
  $PROJECT_ROOT/Sources/CDialects
  $PROJECT_ROOT/Sources/CMLIR
  $LLVM_ADDITIONAL_SYSTEM_LIBRARY_TARGETS"
TOOLS_INSTALL_PATH="$DEPENDENCIES_ROOT/installed/tools"
PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-/usr/local/lib/pkgconfig}
PKG_CONFIG_FILE_PATH="$PKG_CONFIG_PATH/LLVM-for-Swift.pc"
PKG_CONFIG=$(cat << EOF
prefix=$INSTALL_PATH

Name: LLVM for Swift
Description: LLVM, potentially with additional projects. Installed using Tools/build-dependencies in MLIRSwift.
Version: local
Cflags: -I\${prefix}/include
Libs: -lcurses $(
  # For some reason, linking the C++ standard libary is different on Linux and macOS
  [[ "$OSTYPE" == "darwin"* ]] && echo "-lc++" || echo "-lstdc++"
) -L\${prefix}/lib
EOF
)

# Create a comma-separated list of external projects
LLVM_EXTERNAL_PROJECTS=$(
  delim=""
  for TARGET in $(echo "
      MLIRSwiftSupport
      $LLVM_ADDITIONAL_EXTERNAL_PROJECTS")
  do
    printf "%s" "$delim$TARGET"
    delim=","
  done
)

# Create a list of install targets with some extra ceremony so they up as a bash array
LLVM_INSTALL_TARGETS=()
for TARGET in $(echo "$(
  for SYSTEM_LIBRARY_TARGET in $LLVM_SYSTEM_LIBRARY_TARGETS; do
    sed -n 's/link "\(.*\)"/install-\1/p' < "$SYSTEM_LIBRARY_TARGET/module.modulemap"
  done;
  echo "
    install-MLIRSwiftSupport-headers
    install-llvm-headers
    install-mlir-headers
    $LLVM_ADDITIONAL_TARGETS"
  )" | xargs | tr ' ' '\n' | sort -u)
do
  LLVM_INSTALL_TARGETS+=("$TARGET")
done

# If shell is interactive, prompt for comfirmation
echo "This script will perform the following tasks:"
if [[ "$LLVM_REPO" != "local" ]]; then
  # Invoke with LLVM_REPO="" to skip any repo-management logic
  echo " - Checkout commit ${LLVM_COMMIT} from ${LLVM_REPO} to ${LLVM_REPO_PATH}"
fi
echo " - Build LLVM from ${LLVM_ROOT}"
echo "   - The following targets will be built:"
for TARGET in "${LLVM_INSTALL_TARGETS[@]}"; do
  echo "       $TARGET"
done
if [[ ! ${#LLVM_ADDITIONAL_CMAKE_ARGS_ARRAY[@]} -eq 0 ]]; then
  echo "   - Additional cmake arguments:"
  for ARG in "${LLVM_ADDITIONAL_CMAKE_ARGS_ARRAY[@]}"; do
    echo "       $ARG"
  done
fi
echo "   - Built products will be placed in ${LLVM_BUILD_ROOT}"
echo " - Install all available LLVM projects to ${INSTALL_PATH}"
echo " - Install necessary tools to ${TOOLS_INSTALL_PATH}"
echo " - Update ${PKG_CONFIG_FILE_PATH} to point to ${INSTALL_PATH}"
echo ""

if [[ "$NO_INTERACTION" != "true" ]]; then
  echo "Press enter to continue."
  read -r
fi

# Clone/checkout LLVM or other another project that includes LLVM
if [[ "$LLVM_REPO" != "local" ]]; then
  if [[ ! -d "$LLVM_REPO_PATH/.git" ]]; then
    echo "Setting up \"$LLVM_REPO\""
    # Set up repo without cloning
    mkdir -p "$LLVM_REPO_PATH"
    pushd "$LLVM_REPO_PATH" > /dev/null
      git init
      git remote add origin "$LLVM_REPO"
    popd > /dev/null
  fi
  # Checkout specified commit
  echo "Checking out \"$LLVM_COMMIT\""
  pushd "$LLVM_REPO_PATH" > /dev/null
    git fetch origin "$LLVM_COMMIT"
    git checkout -f "$LLVM_COMMIT"
    # This tool is meant to support repos which include LLVM as a submodule
    git submodule update --init
  popd > /dev/null
fi

CMAKE_OSX_DEPLOYMENT_TARGET=""
[[ "$OSTYPE" == "darwin"* ]] && CMAKE_OSX_DEPLOYMENT_TARGET="10.15"

# Build LLVM
(set -x; cmake \
  -S "$LLVM_ROOT/llvm" \
  -B "$LLVM_BUILD_ROOT" \
  -G Ninja \
  -DCMAKE_INSTALL_PREFIX="$INSTALL_PATH" \
  ${CMAKE_OSX_DEPLOYMENT_TARGET:+ "-DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET"} \
  -DCMAKE_C_COMPILER=clang \
  -DCMAKE_CXX_COMPILER=clang++ \
  -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-Release}" \
  -DLLVM_BUILD_EXAMPLES=OFF \
  -DLLVM_INSTALL_UTILS=OFF \
  -DLLVM_BUILD_TOOLS=OFF \
  -DLLVM_TARGETS_TO_BUILD=host \
  -DLLVM_ENABLE_PROJECTS=mlir \
  -DLLVM_ENABLE_OCAMLDOC=OFF \
  -DLLVM_ENABLE_BINDINGS=OFF \
  -DLLVM_ENABLE_ASSERTIONS=ON \
  -DLLVM_EXTERNAL_PROJECTS="$LLVM_EXTERNAL_PROJECTS" \
  -DLLVM_EXTERNAL_MLIRSWIFTSUPPORT_SOURCE_DIR="${TOOLS_ROOT}/MLIRSwiftSupport" \
  "${LLVM_ADDITIONAL_CMAKE_ARGS_ARRAY[@]}")
(set -x; cmake \
  --build "$LLVM_BUILD_ROOT" \
  --target "${LLVM_INSTALL_TARGETS[@]}")

# Install the LLVM package config
if [[ -n "$PKG_CONFIG_FILE_PATH" ]]; then
  echo "Writing pkg-config file to $PKG_CONFIG_FILE_PATH"
  if ! echo "$PKG_CONFIG" > "$PKG_CONFIG_FILE_PATH"; then
    echo "Could not create pkg-config file, please ensure $PKG_CONFIG_FILE_PATH is writable."
    exit 1
  fi
fi

# Install swift-format
if [[ ! -f "$TOOLS_INSTALL_PATH/swift-format" ]]; then
  echo "Installing swift-format"
  # `swift build` doesn't seem to actually build the swift-format executable (likely because it is a dependency), so we use `swift run`. Also, the first invocatin of this fails for some reason in dependent projects.
  swift run --package-path "$TOOLS_ROOT/SwiftFormat" -c release swift-format --version || \
    swift run --package-path "$TOOLS_ROOT/SwiftFormat" -c release swift-format --version
  mkdir -p "$TOOLS_INSTALL_PATH"
  cp "$(swift build --package-path "$TOOLS_ROOT/SwiftFormat" -c release --show-bin-path)/swift-format" "$TOOLS_INSTALL_PATH"
fi
